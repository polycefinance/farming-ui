{"version":3,"sources":["views/Home/components/CardValue.tsx","views/Home/Home.tsx","hooks/useTokenBalance.ts","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/TwitterCard.tsx","hooks/useFarmsWithBalance.ts","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/index.ts"],"names":["CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","useEffect","current","bold","Hero","styled","div","theme","mediaQueries","lg","Cards","BaseLayout","sm","Home","useI18n","location","useLocation","ref","URLSearchParams","search","get","Buffer","from","toString","window","localStorage","getItem","setItem","as","size","mb","color","src","alt","style","height","marginTop","marginRight","display","float","letterSpacing","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","a","cakeContract","getContract","cakeABI","getCakeAddress","methods","call","supply","BigNumber","fetchTotalSupply","useBurnedBalance","tokenAddress","balance","setBalance","balanceOf","bal","fetchBalance","useTokenBalance","useWallet","account","ethereum","fastRefresh","getTokenBalance","res","StyledCakeStats","Card","Row","CakeStats","TranslateString","burnedBalance","farms","useFarms","eggPrice","usePriceCakeBusd","circSupply","minus","cakeSupply","getBalanceNumber","marketCap","times","eggPerBlock","pow","toNumber","StyledTotalValueLockedCard","TotalValueLockedCard","totalValue","useTotalValue","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","width","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","fetchBalances","CakeHarvestBalance","earningsSum","lineHeight","CakeWalletBalance","cakeBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","Block","CardImage","img","Label","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","farmsWithBalance","reduce","accum","earning","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","toFixed","id","disabled","length","onClick","fullWidth","UnlockButton"],"mappings":"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","file":"static/js/7.f00ca6f0.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React, {useEffect} from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link,\n    useHistory,\n    useLocation\n} from \"react-router-dom\";\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\n\nconst Hero = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n    const location = useLocation();\n\n    useEffect(() => {\n        const params = new URLSearchParams(location.search)\n        const ref = params.get('ref')\n        const base64 = (Buffer.from('0x').toString('base64'));\n        const currRef = window.localStorage.getItem('ref');\n\n        if(!currRef) {\n            window.localStorage.setItem('ref', '0kMHg4MTBDNGU3MkFjNDREOTJiM2JFZWVhMjlCNDZDNzc3YUNEMzY1MkVC')\n        }\n\n        if(ref) {\n            window.localStorage.setItem('ref', ref)\n        }\n    }, [location])\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"24px\" color=\"secondary\">\n            <img src=\"/images/egg/banner.png\" alt=\"lottery bunny\" style={{height:'68px', marginTop: '36px', marginRight: '20px'}} />\n            <div style={{display:'inline-block', float: 'right', marginTop:'41px', letterSpacing: '5px', fontSize:'52px', color:'#EAE2FC'}}>POLYCE</div>\n        </Heading>\n\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <TwitterCard/>\n          <CakeStats />\n          <TotalValueLockedCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let eggPerBlock = 0;\n  if(farms && farms[0] && farms[0].eggPerBlock){\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          Polyce Stats\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10005, 'Market Cap')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(marketCap)} decimals={0} prefix=\"$\" />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New Polyce/block')}</Text>\n          <Text bold fontSize=\"14px\">{eggPerBlock}</Text>\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\nimport { useTotalValue } from '../../../state/hooks'\nimport CardValue from './CardValue'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  // const data = useGetStats()\n  const totalValue = useTotalValue();\n  // const tvl = totalValue.toFixed(2);\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"lg\" mb=\"24px\">\n          {TranslateString(999, 'Total Value Locked (TVL)')}\n        </Heading>\n        <>\n          {/* <Heading size=\"xl\">{`$${tvl}`}</Heading> */}\n          {/* <Heading size=\"xl\"> */}\n            <CardValue value={totalValue.toNumber()} prefix=\"$\" decimals={2}/>\n          {/* </Heading> */}\n          <Text color=\"textSubtle\">{TranslateString(999, 'Across all Farms and Pools')}</Text>\n        </>\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'PolyceFinance'\n          }}\n          options={{\n            height: '300',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCsi',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCsi',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(544, 'Polyce to Harvest')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          <Label>~${(eggPrice * earningsSum).toFixed(2)}</Label>\n        </Block>\n        <Block>\n          <Label>{TranslateString(546, 'Polyce in Wallet')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n          <Label>~${(eggPrice * cakeBalance).toFixed(2)}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting Polyce')\n                : TranslateString(999, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","export { default } from './Home'\n"],"sourceRoot":""}