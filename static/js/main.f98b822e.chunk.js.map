{"version":3,"sources":["state/farms/fetchFarms.ts","state/farms/fetchFarmUser.ts","state/farms/index.ts","state/hooks.ts","components/layout/Container.tsx","components/layout/Page.tsx","utils/getRpcUrl.ts","contexts/RefreshContext.tsx","state/actions.ts","hooks/useRefresh.ts","contexts/Localisation/translationsContext.ts","config/constants/types.ts","config/constants/contracts.ts","utils/multicall.ts","utils/addressHelpers.ts","config/constants/pools.ts","state/pools/fetchPoolsUser.ts","state/pools/index.ts","config/constants/farms.ts","style/Global.tsx","config/localisation/languageCodes.ts","contexts/Localisation/languageContext.tsx","contexts/ThemeContext.tsx","hooks/useTheme.ts","components/Menu/config.ts","components/Menu/index.tsx","components/PageLoader.tsx","views/ComingSoon/ComingSoon.tsx","App.tsx","contexts/BlockContext.tsx","state/index.ts","Providers.tsx","index.tsx","utils/web3.ts"],"names":["fetchFarms","a","Promise","all","farmsConfig","map","farmConfig","lpAdress","lpAddresses","CHAIN_ID","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","getMasterChefAddress","multicall","erc20","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","console","log","lpSymbol","tokenAmount","BigNumber","div","pow","tokenPriceVsQuote","tokenSymbol","multipliedBy","toFixed","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","masterchefABI","pid","info","totalAllocPoint","eggPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data","fetchFarmUserAllowances","account","masterChefAdress","farm","erc20ABI","rawLpAllowances","parsedLpAllowances","lpBalance","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","rawStakedBalances","parsedStakedBalances","stakedBalance","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings","initialState","farmsSlice","createSlice","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","liveFarmData","find","f","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","ZERO","useFetchPublicData","useDispatch","slowRefresh","useRefresh","useEffect","useFarms","useSelector","useFarmFromPid","useFarmUser","usePriceBnbBusd","usePriceCakeBusd","bnbPriceUSD","useTotalValue","bnbPrice","cakePrice","value","i","length","val","quoteTokenSymbol","QuoteToken","BNB","CAKE","plus","Container","styled","theme","mediaQueries","sm","Page","lg","nodes","process","getNodeUrl","randomIndex","random","RefreshContext","React","createContext","slow","fast","RefreshContextProvider","children","useState","setSlow","setFast","interval","setInterval","prev","clearInterval","Provider","useContext","fastRefresh","defaultTranslationState","translations","setTranslations","TranslationsContext","PoolCategory","cake","137","97","masterChef","wbnb","lottery","lotteryNFT","mulltiCall","busd","abi","web3","getWeb3","multi","eth","Contract","MultiCallAbi","getMulticallAddress","itf","Interface","calldata","call","toLowerCase","encodeFunctionData","methods","aggregate","returnData","res","decodeFunctionResult","getCakeAddress","addresses","chainId","getWbnbAddress","getLotteryAddress","getLotteryTicketAddress","pools","nonBnbPools","poolsConfig","filter","p","stakingTokenName","bnbPools","nonMasterPools","sousId","masterChefContract","masterChefABI","fetchPoolsAllowance","stakingTokenAddress","contractAddress","allowances","reduce","acc","pool","fetchUserBalances","tokenBalancesRaw","tokenBalances","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","sousChefABI","userInfo","stakedBalances","amount","masterPoolAmount","0","fetchUserPendingRewards","pendingRewards","pendingCsi","pendingReward","PoolsSlice","setPoolsPublicData","livePoolsData","livePoolData","entry","setPoolsUserData","userPoolData","updatePoolsUserData","field","findIndex","fetchPoolsUserDataAsync","stakingTokenBalances","stakingTokenBalance","updateUserAllowance","updateUserBalance","updateUserStakedBalance","updateUserPendingReward","risk","contracts","BUSD","GlobalStyle","createGlobalStyle","colors","background","EN","code","language","allLanguages","CACHE_KEY","LanguageContext","selectedLanguage","setSelectedLanguage","translatedLanguage","setTranslatedLanguage","LanguageContextProvider","parseInt","REACT_APP_CROWDIN_PROJECTID","StringTranslations","token","REACT_APP_CROWDIN_APIKEY","storedLangCode","localStorage","getItem","storedLang","getStoredLang","fetch","then","r","json","translationApiResponse","catch","e","error","langObject","setItem","ThemeContext","isDark","toggleTheme","ThemeContextProvider","isDarkUserSetting","JSON","parse","setIsDark","prevState","stringify","dark","light","useTheme","StyledThemeCopntext","config","label","icon","href","items","Menu","props","useWallet","connect","reset","cakePriceUsd","login","logout","currentLang","langs","setLang","links","priceLink","Wrapper","PageLoader","ComingSoon","as","size","color","mb","style","textAlign","fontSize","src","alt","width","height","margin","float","top","right","position","Home","lazy","Farms","NotFound","EXPONENTIAL_AT","DECIMAL_PLACES","App","window","Global","fallback","path","exact","tokenMode","component","memo","BlockContext","BlockContextProvider","previousBlock","useRef","block","setBlock","getBlockNumber","blockNumber","current","configureStore","devTools","reducer","farmsReducer","poolsReducer","Providers","rpcUrl","getRpcUrl","store","connectors","walletconnect","bsc","ReactDOM","render","StrictMode","document","getElementById","RPC_URL","httpProvider","Web3","providers","HttpProvider","timeout","getContract","contractOptions"],"mappings":"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","file":"static/js/main.f98b822e.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js'\nimport erc20 from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport farmsConfig from 'config/constants/farms'\nimport { QuoteToken } from '../../config/constants/types'\n\nconst CHAIN_ID = 137\n// process.env.REACT_APP_CHAIN_ID\n\nconst fetchFarms = async () => {\n  const data = await Promise.all(\n    farmsConfig.map(async (farmConfig) => {\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\n\n      const calls = [\n        // Balance of token in the LP contract\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of quote token on LP contract\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'balanceOf',\n          params: [lpAdress],\n        },\n        // Balance of LP tokens in the master chef contract\n        {\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n          name: 'balanceOf',\n          params: [getMasterChefAddress()],\n        },\n        // Total supply of LP tokens\n        {\n          address: lpAdress,\n          name: 'totalSupply',\n        },\n        // Token decimals\n        {\n          address: farmConfig.tokenAddresses[CHAIN_ID],\n          name: 'decimals',\n        },\n        // Quote token decimals\n        {\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n          name: 'decimals',\n        },\n      ]\n\n      const [\n        tokenBalanceLP,\n        quoteTokenBlanceLP,\n        lpTokenBalanceMC,\n        lpTotalSupply,\n        tokenDecimals,\n        quoteTokenDecimals\n      ] = await multicall(erc20, calls)\n      let tokenAmount;\n      let lpTotalInQuoteToken;\n      let tokenPriceVsQuote;\n\n      console.log('token decimals', tokenDecimals, quoteTokenDecimals, farmConfig.lpSymbol)\n\n      if(farmConfig.isTokenOnly){\n        console.log(lpTokenBalanceMC)\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(tokenDecimals));\n        if(farmConfig.tokenSymbol === 'USDC' || farmConfig.tokenSymbol === 'USDT' || farmConfig.tokenSymbol === 'DAI'){\n          tokenPriceVsQuote = new BigNumber(1);\n        }else{\n          tokenPriceVsQuote = new BigNumber(\n              quoteTokenDecimals < 19 ?\n                  new BigNumber(quoteTokenBlanceLP).multipliedBy(new BigNumber(10).pow((farmConfig.lpSymbol === 'WBTC' ? 8 : 18)-quoteTokenDecimals)).toFixed()\n                  : quoteTokenBlanceLP\n          ).div(new BigNumber(\n              tokenBalanceLP\n          ));\n        }\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n      }else{\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\n\n\n        // Total value in staking in quote token value\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(18))\n          .times(new BigNumber(2))\n          .times(lpTokenRatio)\n\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\n          .times(lpTokenRatio)\n\n        if(tokenAmount.comparedTo(0) > 0){\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n        }else{\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n        }\n      }\n      const [info, totalAllocPoint, eggPerBlock] = await multicall(masterchefABI, [\n        {\n          address: getMasterChefAddress(),\n          name: 'poolInfo',\n          params: [farmConfig.pid],\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'totalAllocPoint',\n        },\n        {\n          address: getMasterChefAddress(),\n          name: 'csiPerBlock',\n        },\n      ])\n\n\n      const allocPoint = new BigNumber(info.allocPoint._hex)\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\n\n      return {\n        ...farmConfig,\n        tokenAmount: tokenAmount.toJSON(),\n        // quoteTokenAmount: quoteTokenAmount,\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n        poolWeight: poolWeight.toNumber(),\n        multiplier: `${allocPoint.div(100).toString()}X`,\n        depositFeeBP: info.depositFeeBP,\n        eggPerBlock: new BigNumber(eggPerBlock).toNumber(),\n      }\n    }),\n  )\n  return data\n}\n\nexport default fetchFarms\n","import BigNumber from 'bignumber.js'\nimport erc20ABI from 'config/abi/erc20.json'\nimport masterchefABI from 'config/abi/masterchef.json'\nimport multicall from 'utils/multicall'\nimport farmsConfig from 'config/constants/farms'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\nexport const fetchFarmUserAllowances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\n  })\n\n  const rawLpAllowances = await multicall(erc20ABI, calls)\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\n    return new BigNumber(lpBalance).toJSON()\n  })\n  return parsedLpAllowances\n}\n\nexport const fetchFarmUserTokenBalances = async (account: string) => {\n  const calls = farmsConfig.map((farm) => {\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\n    return {\n      address: lpContractAddress,\n      name: 'balanceOf',\n      params: [account],\n    }\n  })\n\n  const rawTokenBalances = await multicall(erc20ABI, calls)\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\n    return new BigNumber(tokenBalance).toJSON()\n  })\n  return parsedTokenBalances\n}\n\nexport const fetchFarmUserStakedBalances = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'userInfo',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawStakedBalances = await multicall(masterchefABI, calls)\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\n  })\n  return parsedStakedBalances\n}\n\nexport const fetchFarmUserEarnings = async (account: string) => {\n  const masterChefAdress = getMasterChefAddress()\n\n  const calls = farmsConfig.map((farm) => {\n    return {\n      address: masterChefAdress,\n      name: 'pendingCsi',\n      params: [farm.pid, account],\n    }\n  })\n\n  const rawEarnings = await multicall(masterchefABI, calls)\n  const parsedEarnings = rawEarnings.map((earnings) => {\n    return new BigNumber(earnings).toJSON()\n  })\n  return parsedEarnings\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport farmsConfig from 'config/constants/farms'\nimport fetchFarms from './fetchFarms'\nimport {\n  fetchFarmUserEarnings,\n  fetchFarmUserAllowances,\n  fetchFarmUserTokenBalances,\n  fetchFarmUserStakedBalances,\n} from './fetchFarmUser'\nimport { FarmsState, Farm } from '../types'\n\nconst initialState: FarmsState = { data: [...farmsConfig] }\n\nexport const farmsSlice = createSlice({\n  name: 'Farms',\n  initialState,\n  reducers: {\n    setFarmsPublicData: (state, action) => {\n      const liveFarmsData: Farm[] = action.payload\n      console.log(liveFarmsData)\n      state.data = state.data.map((farm) => {\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\n        return { ...farm, ...liveFarmData }\n      })\n    },\n    setFarmUserData: (state, action) => {\n      const { arrayOfUserDataObjects } = action.payload\n      arrayOfUserDataObjects.forEach((userDataEl) => {\n        const { index } = userDataEl\n        state.data[index] = { ...state.data[index], userData: userDataEl }\n      })\n    },\n  },\n})\n\n// Actions\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\n\n// Thunks\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\n  const farms = await fetchFarms()\n  dispatch(setFarmsPublicData(farms))\n}\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\n\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\n    return {\n      index,\n      allowance: userFarmAllowances[index],\n      tokenBalance: userFarmTokenBalances[index],\n      stakedBalance: userStakedBalances[index],\n      earnings: userFarmEarnings[index],\n    }\n  })\n\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\n}\n\nexport default farmsSlice.reducer\n","import BigNumber from 'bignumber.js'\nimport { useEffect, useMemo } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmsPublicDataAsync, fetchPoolsPublicDataAsync, fetchPoolsUserDataAsync } from './actions'\nimport { State, Farm, Pool } from './types'\nimport { QuoteToken } from '../config/constants/types'\n\nconst ZERO = new BigNumber(0)\n\nexport const useFetchPublicData = () => {\n  const dispatch = useDispatch()\n  const { slowRefresh } = useRefresh()\n  useEffect(() => {\n    dispatch(fetchFarmsPublicDataAsync())\n    // dispatch(fetchPoolsPublicDataAsync())\n  }, [dispatch, slowRefresh])\n}\n\n// Farms\n\nexport const useFarms = (): Farm[] => {\n  const farms = useSelector((state: State) => state.farms.data)\n  return farms\n}\n\nexport const useFarmFromPid = (pid): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.pid === pid))\n  return farm\n}\n\nexport const useFarmFromSymbol = (lpSymbol: string): Farm => {\n  const farm = useSelector((state: State) => state.farms.data.find((f) => f.lpSymbol === lpSymbol))\n  return farm\n}\n\nexport const useFarmUser = (pid) => {\n  const farm = useFarmFromPid(pid)\n\n  return {\n    allowance: farm.userData ? new BigNumber(farm.userData.allowance) : new BigNumber(0),\n    tokenBalance: farm.userData ? new BigNumber(farm.userData.tokenBalance) : new BigNumber(0),\n    stakedBalance: farm.userData ? new BigNumber(farm.userData.stakedBalance) : new BigNumber(0),\n    earnings: farm.userData ? new BigNumber(farm.userData.earnings) : new BigNumber(0),\n  }\n}\n\n\n// Pools\n\nexport const usePools = (account): Pool[] => {\n  const { fastRefresh } = useRefresh()\n  const dispatch = useDispatch()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchPoolsUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const pools = useSelector((state: State) => state.pools.data)\n  return pools\n}\n\nexport const usePoolFromPid = (sousId): Pool => {\n  const pool = useSelector((state: State) => state.pools.data.find((p) => p.sousId === sousId))\n  return pool\n}\n\n// Prices\n\nexport const usePriceBnbBusd = (): BigNumber => {\n  const pid = 2 // BUSD-BNB LP\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO\n}\n\nexport const usePriceCakeBusd = (): BigNumber => {\n  const pid = 0 // CAKE-BNB LP\n  const bnbPriceUSD = usePriceBnbBusd()\n  const farm = useFarmFromPid(pid)\n  return farm.tokenPriceVsQuote ? bnbPriceUSD.times(farm.tokenPriceVsQuote) : ZERO\n  // const pid = 0; // Polyce-BUSD LP\n  // const farm = useFarmFromPid(pid);\n  // return farm.tokenPriceVsQuote ? new BigNumber(farm.tokenPriceVsQuote) : ZERO;\n}\n\nexport const useTotalValue = (): BigNumber => {\n  const farms = useFarms();\n  const bnbPrice = usePriceBnbBusd();\n  const cakePrice = usePriceCakeBusd();\n  let value = new BigNumber(0);\n  for (let i = 0; i < farms.length; i++) {\n    const farm = farms[i]\n    if (farm.lpTotalInQuoteToken) {\n      let val;\n      if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n        val = (bnbPrice.times(farm.lpTotalInQuoteToken));\n      }else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n        val = (cakePrice.times(farm.lpTotalInQuoteToken));\n      }else{\n        val = (farm.lpTotalInQuoteToken);\n      }\n      value = value.plus(val);\n    }\n  }\n  return value;\n}\n","import styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 992px;\n  padding-left: 16px;\n  padding-right: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-left: 24px;\n    padding-right: 24px;\n  }\n`\n\nexport default Container\n","import styled from 'styled-components'\nimport Container from './Container'\n\nconst Page = styled(Container)`\n  min-height: calc(100vh - 64px);\n  padding-top: 16px;\n  padding-bottom: 16px;\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    padding-top: 24px;\n    padding-bottom: 24px;\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    padding-top: 32px;\n    padding-bottom: 32px;\n  }\n`\n\nexport default Page\n","import random from 'lodash/random'\n\n// Array of available nodes to connect to\nconst nodes = [process.env.REACT_APP_NODE_1, process.env.REACT_APP_NODE_2, process.env.REACT_APP_NODE_3]\n\nconst getNodeUrl = () => {\n  const randomIndex = random(0, nodes.length - 1)\n  return nodes[randomIndex]\n}\n\nexport default getNodeUrl\n","import React, { useState, useEffect } from 'react'\n\nconst FAST_INTERVAL = 10000\nconst SLOW_INTERVAL = 60000\n\nconst RefreshContext = React.createContext({ slow: 0, fast: 0 })\n\n// This context maintain 2 counters that can be used as a dependencies on other hooks to force a periodic refresh\nconst RefreshContextProvider = ({ children }) => {\n  const [slow, setSlow] = useState(0)\n  const [fast, setFast] = useState(0)\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setFast((prev) => prev + 1)\n    }, FAST_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      setSlow((prev) => prev + 1)\n    }, SLOW_INTERVAL)\n    return () => clearInterval(interval)\n  }, [])\n\n  return <RefreshContext.Provider value={{ slow, fast }}>{children}</RefreshContext.Provider>\n}\n\nexport { RefreshContext, RefreshContextProvider }\n","export { fetchFarmsPublicDataAsync, fetchFarmUserDataAsync } from './farms'\nexport {\n  fetchPoolsPublicDataAsync,\n  fetchPoolsUserDataAsync,\n  updateUserAllowance,\n  updateUserBalance,\n  updateUserPendingReward,\n  updateUserStakedBalance,\n} from './pools'\n","import { useContext } from 'react'\nimport { RefreshContext } from 'contexts/RefreshContext'\n\nconst useRefresh = () => {\n  const { fast, slow } = useContext(RefreshContext)\n  return { fastRefresh: fast, slowRefresh: slow }\n}\n\nexport default useRefresh\n","import React, { createContext } from 'react'\n\nexport interface TranslationState {\n  translations: Array<any>\n  setTranslations: React.Dispatch<React.SetStateAction<Array<any>>>\n}\n\nconst defaultTranslationState: TranslationState = {\n  translations: [],\n  setTranslations: (): void => undefined,\n}\n\nexport const TranslationsContext = createContext(defaultTranslationState as TranslationState)\n","export type IfoStatus = 'coming_soon' | 'live' | 'finished'\n\nexport interface Ifo {\n  id: string\n  isActive: boolean\n  address: string\n  name: string\n  subTitle?: string\n  description?: string\n  launchDate: string\n  launchTime: string\n  saleAmount: string\n  raiseAmount: string\n  cakeToBurn: string\n  projectSiteUrl: string\n  currency: string\n  currencyAddress: string\n  tokenDecimals: number\n  releaseBlockNumber: number\n}\n\nexport enum QuoteToken {\n  'BNB' = 'BNB',\n  'CAKE' = 'CAKE',\n  'SYRUP' = 'SYRUP',\n  'BUSD' = 'BUSD',\n  'TWT' = 'TWT',\n  'UST' = 'UST',\n}\n\nexport enum PoolCategory {\n  'COMMUNITY' = 'Community',\n  'CORE' = 'Core',\n  'BINANCE' = 'Binance', // Pools using native BNB behave differently than pools using a token\n}\n\nexport interface Address {\n  97?: string\n  137: string\n}\n\nexport interface FarmConfig {\n  pid: number\n  lpSymbol: string\n  lpAddresses: Address\n  tokenSymbol: string\n  tokenAddresses: Address\n  quoteTokenSymbol: QuoteToken\n  quoteTokenAdresses: Address\n  multiplier?: string\n  isTokenOnly?: boolean\n  isCommunity?: boolean\n  risk: number\n  dual?: {\n    rewardPerBlock: number\n    earnLabel: string\n    endBlock: number\n  }\n}\n\nexport interface PoolConfig {\n  sousId: number\n  image?: string\n  tokenName: string\n  stakingTokenName: QuoteToken\n  stakingLimit?: number\n  stakingTokenAddress?: string\n  contractAddress: Address\n  poolCategory: PoolCategory\n  projectLink: string\n  tokenPerBlock: string\n  sortOrder?: number\n  harvest?: boolean\n  isFinished?: boolean\n  tokenDecimals: number\n}\n\nexport type Nft = {\n  name: string\n  description: string\n  originalImage: string\n  previewImage: string\n  blurImage: string\n  sortOrder: number\n  bunnyId: number\n}\n","export default {\n  cake: {\n    137: '0x4cfA123Ff51C99ca34fF1D24dC28Fe3C78B04Ce3',\n    97: '',\n  },\n  masterChef: {\n    137: '0x1c0833f879d8d75E73CBfD8d0F992112006794a5',\n    97: '',\n  },\n  wbnb: {\n    137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    97: '',\n  },\n  lottery: {\n    137: '',\n    97: '',\n  },\n  lotteryNFT: {\n    137: '',\n    97: '',\n  },\n  mulltiCall: {\n    137: '0x95028E5B8a734bb7E2071F96De89BABe75be9C8E',\n    97: '0x67ADCB4dF3931b0C5Da724058ADC2174a9844412',\n  },\n  busd: {\n    137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n    97: '',\n  },\n}\n","import { AbiItem } from 'web3-utils'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport { getMulticallAddress } from 'utils/addressHelpers'\n\ninterface Call {\n  address: string // Address of the contract\n  name: string // Function name on the contract (exemple: balanceOf)\n  params?: any[] // Function params\n}\n\nconst multicall = async (abi: any[], calls: Call[]) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\n  const itf = new Interface(abi)\n\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\n  const { returnData } = await multi.methods.aggregate(calldata).call()\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\n\n  return res\n}\n\nexport default multicall\n","import addresses from 'config/constants/contracts'\n\nconst chainId = process.env.REACT_APP_CHAIN_ID\n// const chainId = 137;\n\nexport const getCakeAddress = () => {\n  return addresses.cake[chainId]\n}\nexport const getMasterChefAddress = () => {\n  return addresses.masterChef[chainId]\n}\nexport const getMulticallAddress = () => {\n  return addresses.mulltiCall[chainId]\n}\nexport const getWbnbAddress = () => {\n  return addresses.wbnb[chainId]\n}\nexport const getLotteryAddress = () => {\n  return addresses.lottery[chainId]\n}\nexport const getLotteryTicketAddress = () => {\n  return addresses.lotteryNFT[chainId]\n}\n","import { PoolConfig, QuoteToken, PoolCategory } from './types'\n\nconst pools: PoolConfig[] = [\n  // {\n  //   sousId: 0,\n  //   tokenName: 'CAKE',\n  //   stakingTokenName: QuoteToken.CAKE,\n  //   stakingTokenAddress: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   contractAddress: {\n  //     97: '0xd3af5fe61dbaf8f73149bfcfa9fb653ff096029a',\n  //     137: '0x73feaa1eE314F8c655E354234017bE2193C9E24E',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://pancakeswap.finance/',\n  //   harvest: true,\n  //   tokenPerBlock: '10',\n  //   sortOrder: 1,\n  //   isFinished: false,\n  //   tokenDecimals: 18,\n  // },\n  // {\n  //   sousId: 1,\n  //   tokenName: 'TWT',\n  //   stakingTokenName: QuoteToken.SYRUP,\n  //   stakingTokenAddress: '0x009cF7bC57584b7998236eff51b98A168DceA9B0',\n  //   contractAddress: {\n  //     97: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //     137: '0xAfd61Dc94f11A70Ae110dC0E0F2061Af5633061A',\n  //   },\n  //   poolCategory: PoolCategory.CORE,\n  //   projectLink: 'https://trustwallet.com/',\n  //   harvest: true,\n  //   tokenPerBlock: '20',\n  //   sortOrder: 999,\n  //   isFinished: true,\n  //   tokenDecimals: 18,\n  // },\n]\n\nexport default pools\n","import { AbiItem } from 'web3-utils'\nimport poolsConfig from 'config/constants/pools'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport sousChefABI from 'config/abi/sousChef.json'\nimport erc20ABI from 'config/abi/erc20.json'\nimport { QuoteToken } from 'config/constants/types'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport { getWeb3 } from 'utils/web3'\nimport BigNumber from 'bignumber.js'\n\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\n\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\nconst nonBnbPools = poolsConfig.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\nconst bnbPools = poolsConfig.filter((p) => p.stakingTokenName === QuoteToken.BNB)\nconst nonMasterPools = poolsConfig.filter((p) => p.sousId !== 0)\nconst web3 = getWeb3()\nconst masterChefContract = new web3.eth.Contract((masterChefABI as unknown) as AbiItem, getMasterChefAddress())\n\nexport const fetchPoolsAllowance = async (account) => {\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'allowance',\n    params: [account, p.contractAddress[CHAIN_ID]],\n  }))\n\n  const allowances = await multicall(erc20ABI, calls)\n  return nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\n    {},\n  )\n}\n\nexport const fetchUserBalances = async (account) => {\n  // Non BNB pools\n  const calls = nonBnbPools.map((p) => ({\n    address: p.stakingTokenAddress,\n    name: 'balanceOf',\n    params: [account],\n  }))\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\n  const tokenBalances = nonBnbPools.reduce(\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\n    {},\n  )\n\n  // BNB pools\n  const bnbBalance = await web3.eth.getBalance(account)\n  const bnbBalances = bnbPools.reduce(\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\n    {},\n  )\n\n  return { ...tokenBalances, ...bnbBalances }\n}\n\nexport const fetchUserStakeBalances = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'userInfo',\n    params: [account],\n  }))\n  const userInfo = await multicall(sousChefABI, calls)\n  const stakedBalances = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(userInfo[index].amount._hex).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const { amount: masterPoolAmount } = await masterChefContract.methods.userInfo('0', account).call()\n\n  return { ...stakedBalances, 0: new BigNumber(masterPoolAmount).toJSON() }\n}\n\nexport const fetchUserPendingRewards = async (account) => {\n  const calls = nonMasterPools.map((p) => ({\n    address: p.contractAddress[CHAIN_ID],\n    name: 'pendingReward',\n    params: [account],\n  }))\n  const res = await multicall(sousChefABI, calls)\n  const pendingRewards = nonMasterPools.reduce(\n    (acc, pool, index) => ({\n      ...acc,\n      [pool.sousId]: new BigNumber(res[index]).toJSON(),\n    }),\n    {},\n  )\n\n  // Cake / Cake pool\n  const pendingReward = await masterChefContract.methods.pendingCsi('0', account).call()\n\n  return { ...pendingRewards, 0: new BigNumber(pendingReward).toJSON() }\n}\n","/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit'\nimport poolsConfig from 'config/constants/pools'\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStatking } from './fetchPools'\nimport {\n  fetchPoolsAllowance,\n  fetchUserBalances,\n  fetchUserStakeBalances,\n  fetchUserPendingRewards,\n} from './fetchPoolsUser'\nimport { PoolsState, Pool } from '../types'\n\nconst initialState: PoolsState = { data: [...poolsConfig] }\n\nexport const PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState,\n  reducers: {\n    setPoolsPublicData: (state, action) => {\n      const livePoolsData: Pool[] = action.payload\n      state.data = state.data.map((pool) => {\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, ...livePoolData }\n      })\n    },\n    setPoolsUserData: (state, action) => {\n      const userData = action.payload\n      state.data = state.data.map((pool) => {\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\n        return { ...pool, userData: userPoolData }\n      })\n    },\n    updatePoolsUserData: (state, action) => {\n      const { field, value, sousId } = action.payload\n      const index = state.data.findIndex((p) => p.sousId === sousId)\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index].userData, [field]: value } }\n    },\n  },\n})\n\n// Actions\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\n\n// Thunks\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\n  const blockLimits = await fetchPoolsBlockLimits()\n  const totalStakings = await fetchPoolsTotalStatking()\n\n  const liveData = poolsConfig.map((pool) => {\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\n    return {\n      ...blockLimit,\n      ...totalStaking,\n    }\n  })\n\n  dispatch(setPoolsPublicData(liveData))\n}\n\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  const stakingTokenBalances = await fetchUserBalances(account)\n  const stakedBalances = await fetchUserStakeBalances(account)\n  const pendingRewards = await fetchUserPendingRewards(account)\n\n  const userData = poolsConfig.map((pool) => ({\n    sousId: pool.sousId,\n    allowance: allowances[pool.sousId],\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\n    stakedBalance: stakedBalances[pool.sousId],\n    pendingReward: pendingRewards[pool.sousId],\n  }))\n\n  dispatch(setPoolsUserData(userData))\n}\n\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\n  const allowances = await fetchPoolsAllowance(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\n}\n\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\n  const tokenBalances = await fetchUserBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\n}\n\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\n  const stakedBalances = await fetchUserStakeBalances(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\n}\n\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\n  const pendingRewards = await fetchUserPendingRewards(account)\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\n}\n\nexport default PoolsSlice.reducer\n","import contracts from './contracts'\nimport { FarmConfig, QuoteToken } from './types'\n\nconst farms: FarmConfig[] = [\n  {\n    pid: 0,\n    risk: 5,\n    lpSymbol: 'CSI-WMATIC LP',\n    lpAddresses: {\n      97: '',\n      137: '0x54d6d7c5ddfd973abc81d785034132a654c9296c',\n    },\n    tokenSymbol: 'CSI',\n    tokenAddresses: {\n      97: '',\n      137: '0x4cfA123Ff51C99ca34fF1D24dC28Fe3C78B04Ce3',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 1,\n    risk: 5,\n    lpSymbol: 'CSI-USDC LP',\n    lpAddresses: {\n      97: '',\n      137: '0x8cdfd35efa6272e4e0dadb612fc378cd9eb635e4',\n    },\n    tokenSymbol: 'CSI',\n    tokenAddresses: {\n      97: '',\n      137: '0x4cfA123Ff51C99ca34fF1D24dC28Fe3C78B04Ce3',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 2,\n    risk: 5,\n    lpSymbol: 'WMATIC-USDC LP',\n    lpAddresses: {\n      97: '',\n      137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827',\n    },\n    tokenSymbol: 'CSI',\n    tokenAddresses: {\n      97: '',\n      137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 3,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'CSI',\n    lpAddresses: {\n      97: '',\n      137: '0x8cdfd35efa6272e4e0dadb612fc378cd9eb635e4', // BNB-BUSD LP\n    },\n    // done\n    tokenSymbol: 'CSI',\n    tokenAddresses: {\n      97: '',\n      137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 4,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'WMATIC',\n    lpAddresses: {\n      97: '',\n      137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827', // BNB-BUSD LP\n    },\n    tokenSymbol: 'WMATIC',\n    //  done\n    tokenAddresses: {\n      97: '',\n      137: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 5,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'WBTC',\n    lpAddresses: {\n      97: '',\n      137: '0xf6B87181BF250af082272E3f448eC3238746Ce3D', // BNB-BUSD LP\n    },\n    tokenSymbol: 'WBTC',\n    // done\n    tokenAddresses: {\n      97: '',\n      137: '0x1BFD67037B42Cf73acF2047067bd4F2C47D9BfD6',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 6,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'WETH',\n    lpAddresses: {\n      97: '',\n      137: '0x853ee4b2a13f8a742d64c8f088be7ba2131f670d', // BNB-BUSD LP\n    },\n    tokenSymbol: 'WETH',\n    // done\n    tokenAddresses: {\n      97: '',\n      137: '0x7ceB23fD6bC0adD59E62ac25578270cFf1b9f619',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 7,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'USDT',\n    lpAddresses: {\n      97: '',\n      137: '0x2cF7252e74036d1Da831d11089D326296e64a728', // BNB-BUSD LP\n    },\n    tokenSymbol: 'USDT',\n    // done\n    tokenAddresses: {\n      97: '',\n      137: '0xc2132D05D31c914a87C6611C10748AEb04B58e8F',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 8,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'USDC',\n    lpAddresses: {\n      97: '',\n      137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827', // BNB-BUSD LP\n    },\n    tokenSymbol: 'USDC',\n    // done\n    tokenAddresses: {\n      97: '',\n      137: '0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n  {\n    pid: 9,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'DAI',\n    lpAddresses: {\n      97: '',\n      137: '0x6e7a5fafcec6bb1e78bae2a1f0b612012bf14827', // BNB-BUSD LP\n    },\n    tokenSymbol: 'DAI',\n    tokenAddresses: {\n      97: '',\n      137: '0x8f3Cf7ad23Cd3CaDbD9735AFf958023239c6A063',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n  {\n    pid: 10,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'QUICK',\n    lpAddresses: {\n      97: '',\n      137: '0x1F1E4c845183EF6d50E9609F16f6f9cAE43BC9Cb', // BNB-BUSD LP\n    },\n    tokenSymbol: 'QUICK',\n    // done\n    tokenAddresses: {\n      97: '',\n      137: '0x831753DD7087CaC61aB5644b308642cc1c33Dc13',\n    },\n    quoteTokenSymbol: QuoteToken.BUSD,\n    quoteTokenAdresses: contracts.busd,\n  },\n\n    // link, sushi left\n  {\n    pid: 11,\n    risk: 3,\n    isTokenOnly: true,\n    lpSymbol: 'SUSHI',\n    lpAddresses: {\n      97: '',\n      137: '0x597A9bc3b24C2A578CCb3aa2c2C62C39427c6a49', // BNB-BUSD LP\n    },\n    tokenSymbol: 'SUSHI',\n    tokenAddresses: {\n      97: '',\n      137: '0x0b3F868E0BE5597D5DB7fEB59E1CADBb0fdDa50a',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n\n  {\n    pid: 12,\n    risk: 1,\n    isTokenOnly: true,\n    lpSymbol: 'LINK',\n    lpAddresses: {\n      97: '',\n      137: '0x3c986748414A812e455DCd5418246B8fdEd5C369', // Polyce-BUSD LP (BUSD-BUSD will ignore)\n    },\n    tokenSymbol: 'LINK',\n    tokenAddresses: {\n      97: '',\n      137: '0x53E0bca35eC356BD5ddDFebbD1Fc0fD03FaBad39',\n    },\n    quoteTokenSymbol: QuoteToken.BNB,\n    quoteTokenAdresses: contracts.wbnb,\n  },\n\n\n\n\n\n\n\n  // {\n  //   pid: 14,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'WBNB',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0x1b96b92314c44b159149f7e0303511fb2fc4774f', // BNB-BUSD LP\n  //   },\n  //   tokenSymbol: 'WBNB',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 15,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'USDT',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0xc15fa3e22c912a276550f3e5fe3b0deb87b55acd', // USDT-BUSD LP\n  //   },\n  //   tokenSymbol: 'USDT',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0x55d398326f99059ff775485246999027b3197955',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 16,\n  //   risk: 2,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'BTCB',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0xb8875e207ee8096a929d543c9981c9586992eacb', // BTCB-BUSD LP\n  //   },\n  //   tokenSymbol: 'BTCB',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0x7130d2a12b9bcbfae4f2634d864a1ee1ce3ead9c',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 17,\n  //   risk: 2,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'ETH',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0xd9a0d1f5e02de2403f68bb71a15f8847a854b494', // ETH-BUSD LP\n  //   },\n  //   tokenSymbol: 'ETH',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0x2170ed0880ac9a755fd29b2688956bd959f933f8',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 18,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'DAI',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0x3ab77e40340ab084c3e23be8e5a6f7afed9d41dc', // DAI-BUSD LP\n  //   },\n  //   tokenSymbol: 'DAI',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0x1af3f329e8be154074d8769d1ffa4ee058b1dbc3',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 19,\n  //   risk: 1,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'USDC',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0x680dd100e4b394bda26a59dd5c119a391e747d18', // USDC-BUSD LP\n  //   },\n  //   tokenSymbol: 'USDC',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 20,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'DOT',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0x54c1ec2f543966953f2f7564692606ea7d5a184e', // DOT-BUSD LP\n  //   },\n  //   tokenSymbol: 'DOT',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0x7083609fce4d1d8dc0c979aab8c869ea2c873402',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 21,\n  //   risk: 4,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'CAKE',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0x0ed8e0a2d99643e1e65cca22ed4424090b8b7458', // CAKE-BUSD LP\n  //   },\n  //   tokenSymbol: 'CAKE',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0x0e09fabb73bd3ade0a17ecc321fd13a19e81ce82',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 22,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'BSCX',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0xa32a983a64ce21834221aa0ad1f1533907553136', // BSCX-BUSD LP\n  //   },\n  //   tokenSymbol: 'BSCX',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0x5ac52ee5b2a633895292ff6d8a89bb9190451587',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BUSD,\n  //   quoteTokenAdresses: contracts.busd,\n  // },\n  // {\n  //   pid: 23,\n  //   risk: 3,\n  //   isTokenOnly: true,\n  //   lpSymbol: 'AUTO',\n  //   lpAddresses: {\n  //     97: '',\n  //     137: '0x4d0228ebeb39f6d2f29ba528e2d15fc9121ead56', // AUTO-BNB LP\n  //   },\n  //   tokenSymbol: 'AUTO',\n  //   tokenAddresses: {\n  //     97: '',\n  //     137: '0xa184088a740c695e156f91f5cc086a06bb78b827',\n  //   },\n  //   quoteTokenSymbol: QuoteToken.BNB,\n  //   quoteTokenAdresses: contracts.wbnb,\n  // },\n]\n\nexport default farms\n","import { createGlobalStyle } from 'styled-components'\n// eslint-disable-next-line import/no-unresolved\nimport { PancakeTheme } from '@pancakeswap-libs/uikit'\n\ndeclare module 'styled-components' {\n  /* eslint-disable @typescript-eslint/no-empty-interface */\n  export interface DefaultTheme extends PancakeTheme {}\n}\n\nconst GlobalStyle = createGlobalStyle`\n  * {\n    font-family: 'Kanit', sans-serif;\n  }\n  body {\n    background-color: ${({ theme }) => theme.colors.background};\n\n    img {\n      height: auto;\n      max-width: 100%;\n    }\n  }\n`\n\nexport default GlobalStyle\n","export const EN = { code: 'en', language: 'English' }\nexport const AR = { code: 'ar', language: 'العربية' }\nexport const CA = { code: 'ca', language: 'Català' }\nexport const ZHCN = { code: 'zh-CN', language: '简体中文' }\nexport const ZHTW = { code: 'zh-TW', language: '繁體中文' }\nexport const CS = { code: 'cs', language: 'Čeština' }\nexport const DA = { code: 'da', language: 'Dansk' }\nexport const DE = { code: 'de', language: 'Deutsch' }\nexport const NL = { code: 'nl', language: 'Nederlands' }\nexport const FIL = { code: 'fil', language: 'Filipino' }\nexport const FI = { code: 'fi', language: 'Suomalainen' }\nexport const FR = { code: 'fr', language: 'Français' }\nexport const EL = { code: 'el', language: 'Ελληνικά' }\nexport const HI = { code: 'hi', language: 'हिंदी' }\nexport const HU = { code: 'hu', language: 'Magyar' }\nexport const ID = { code: 'id', language: 'Bahasa Indonesia' }\nexport const IT = { code: 'it', language: 'Italiano' }\nexport const JA = { code: 'ja', language: '日本語' }\nexport const KO = { code: 'ko', language: '한국어' }\nexport const PTBR = { code: 'pt-BR', language: 'Português' }\nexport const RO = { code: 'ro', language: 'Română' }\nexport const RU = { code: 'ru', language: 'Русский' }\nexport const SR = { code: 'sr', language: 'Српски' }\nexport const ESES = { code: 'es-ES', language: 'Español' }\nexport const SVSE = { code: 'sv-SE', language: 'Svenska' }\nexport const TA = { code: 'ta', language: 'தமிழ்' }\nexport const TR = { code: 'tr', language: 'Türkçe' }\nexport const UK = { code: 'uk', language: 'Українська' }\nexport const VI = { code: 'vi', language: 'Tiếng Việt' }\n\nexport const allLanguages = [\n  EN,\n  // AR,\n  // CA,\n  // ZHCN,\n  // ZHTW,\n  // CS,\n  // DA,\n  // DE,\n  // NL,\n  // FIL,\n  // FI,\n  // FR,\n  // EL,\n  // HI,\n  // HU,\n  // ID,\n  // IT,\n  // JA,\n  // KO,\n  // PTBR,\n  // RO,\n  // RU,\n  // SR,\n  // ESES,\n  // SVSE,\n  // TA,\n  // TR,\n  // UK,\n  // VI,\n]\n","import React, { useState, useEffect } from 'react'\nimport { StringTranslations } from '@crowdin/crowdin-api-client'\nimport { TranslationsContext } from 'contexts/Localisation/translationsContext'\nimport { allLanguages, EN } from 'config/localisation/languageCodes'\n\nconst CACHE_KEY = 'pancakeSwapLanguage'\n\nexport interface LangType {\n  code: string\n  language: string\n}\n\nexport interface LanguageState {\n  selectedLanguage: LangType\n  setSelectedLanguage: (langObject: LangType) => void\n  translatedLanguage: LangType\n  setTranslatedLanguage: React.Dispatch<React.SetStateAction<LangType>>\n}\n\nconst LanguageContext = React.createContext({\n  selectedLanguage: EN,\n  setSelectedLanguage: () => undefined,\n  translatedLanguage: EN,\n  setTranslatedLanguage: () => undefined,\n} as LanguageState)\n\nconst fileId = 8\nconst projectId = parseInt(process.env.REACT_APP_CROWDIN_PROJECTID)\nconst stringTranslationsApi = new StringTranslations({\n  token: process.env.REACT_APP_CROWDIN_APIKEY,\n})\n\nconst fetchTranslationsForSelectedLanguage = (selectedLanguage) => {\n  return stringTranslationsApi.listLanguageTranslations(projectId, selectedLanguage.code, undefined, fileId, 200)\n}\n\nconst LanguageContextProvider = ({ children }) => {\n  const [selectedLanguage, setSelectedLanguage] = useState<any>(EN)\n  const [translatedLanguage, setTranslatedLanguage] = useState<any>(EN)\n  const [translations, setTranslations] = useState<Array<any>>([])\n\n  const getStoredLang = (storedLangCode: string) => {\n    return allLanguages.filter((language) => {\n      return language.code === storedLangCode\n    })[0]\n  }\n\n  useEffect(() => {\n    const storedLangCode = localStorage.getItem(CACHE_KEY)\n    if (storedLangCode) {\n      const storedLang = getStoredLang(storedLangCode)\n      setSelectedLanguage(storedLang)\n    } else {\n      setSelectedLanguage(EN)\n    }\n  }, [])\n\n  useEffect(() => {\n    if (selectedLanguage) {\n      console.log(`import(\\`../../../public/i18n/${selectedLanguage.code}.json\\`)`);\n      fetch(`./i18n/${selectedLanguage.code}.json`)\n        .then(r=>r.json())\n      // fetchTranslationsForSelectedLanguage(selectedLanguage)\n        .then((translationApiResponse) => {\n          if (translationApiResponse.data.length < 1) {\n            setTranslations(['error'])\n          } else {\n            setTranslations(translationApiResponse.data)\n          }\n        })\n        .then(() => setTranslatedLanguage(selectedLanguage))\n        .catch((e) => {\n          console.error(\"ERROR\");\n          console.error(e);\n          setTranslations(['error'])\n        })\n    }\n  }, [selectedLanguage, setTranslations])\n\n  const handleLanguageSelect = (langObject: LangType) => {\n    setSelectedLanguage(langObject)\n    localStorage.setItem(CACHE_KEY, langObject.code)\n  }\n\n  return (\n    <LanguageContext.Provider\n      value={{ selectedLanguage, setSelectedLanguage: handleLanguageSelect, translatedLanguage, setTranslatedLanguage }}\n    >\n      <TranslationsContext.Provider value={{ translations, setTranslations }}>{children}</TranslationsContext.Provider>\n    </LanguageContext.Provider>\n  )\n}\n\nexport { LanguageContext, LanguageContextProvider }\n","import React, { useState } from 'react'\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\nimport { light, dark } from '@pancakeswap-libs/uikit'\n\nconst CACHE_KEY = 'IS_DARK'\n\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\n\nconst ThemeContextProvider = ({ children }) => {\n  const [isDark, setIsDark] = useState(() => {\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\n  })\n\n  const toggleTheme = () => {\n    setIsDark((prevState) => {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\n      return !prevState\n    })\n  }\n\n  return (\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\n    </ThemeContext.Provider>\n  )\n}\n\nexport { ThemeContext, ThemeContextProvider }\n","import { useContext } from 'react'\nimport { ThemeContext as StyledThemeCopntext } from 'styled-components'\nimport { ThemeContext } from 'contexts/ThemeContext'\n\nconst useTheme = () => {\n  const { isDark, toggleTheme } = useContext(ThemeContext)\n  const theme = useContext(StyledThemeCopntext)\n  return { isDark, toggleTheme, theme }\n}\n\nexport default useTheme\n","import { MenuEntry } from '@pancakeswap-libs/uikit'\n\nconst config: MenuEntry[] = [\n  {\n    label: 'Home',\n    icon: 'HomeIcon',\n    href: '/',\n  },\n  {\n    label: 'Trade',\n    icon: 'TradeIcon',\n    items: [\n      {\n        label: 'Exchange',\n        href: 'https://quickswap.exchange/#/swap?outputCurrency=0x4cfA123Ff51C99ca34fF1D24dC28Fe3C78B04Ce3',\n      },\n      {\n        label: 'Liquidity',\n        href: 'https://quickswap.exchange/#/add/ETH/0x4cfA123Ff51C99ca34fF1D24dC28Fe3C78B04Ce3',\n      },\n    ],\n  },\n  {\n    label: 'Jail',\n    icon: 'FarmIcon',\n    href: '/jail',\n  },\n  {\n    label: 'Bribes',\n    icon: 'PoolIcon',\n    href: '/bribes',\n  },\n  {\n    label: 'Gambling',\n    icon: 'BondsIcon',\n    href: '/gambling',\n  },\n  {\n    label: 'Audit',\n    icon: 'AuditIcon',\n    href: 'https://github.com/polycefinance/contract-audit',\n  },\n  {\n    label: 'Info',\n    icon: 'InfoIcon',\n    items: [\n      {\n        label: 'GitBook',\n        href: 'https://polycefinance.gitbook.io/',\n      },\n      {\n        label: 'QuickSwap Exchange',\n        href: 'https://quickswap.exchange/#/swap?outputCurrency=0x4cfA123Ff51C99ca34fF1D24dC28Fe3C78B04Ce3',\n      },\n      {\n        label: 'QuickSwap Charts',\n        href: 'https://info.quickswap.exchange/token/0x4cfA123Ff51C99ca34fF1D24dC28Fe3C78B04Ce3'\n      }\n    ],\n  }\n]\n\nexport default config\n","import React, { useContext } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { allLanguages } from 'config/localisation/languageCodes'\nimport { LanguageContext } from 'contexts/Localisation/languageContext'\nimport useTheme from 'hooks/useTheme'\nimport { usePriceCakeBusd } from 'state/hooks'\nimport { Menu as UikitMenu } from '@pancakeswap-libs/uikit'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport config from './config'\n\nconst Menu = (props) => {\n  const { account, connect, reset } = useWallet()\n  const { selectedLanguage, setSelectedLanguage } = useContext(LanguageContext)\n  const { isDark, toggleTheme } = useTheme()\n  const cakePriceUsd = usePriceCakeBusd()\n\n  return (\n    <UikitMenu\n      account={account}\n      login={connect}\n      logout={reset}\n      isDark={isDark}\n      toggleTheme={toggleTheme}\n      currentLang={selectedLanguage && selectedLanguage.code}\n      langs={allLanguages}\n      setLang={setSelectedLanguage}\n      cakePriceUsd={cakePriceUsd.toNumber()}\n      links={config}\n      priceLink={`https://quickswap.exchange/#/swap?outputCurrency=${getCakeAddress()}`}\n      {...props}\n    />\n  )\n}\n\nexport default Menu\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Spinner } from '@pancakeswap-libs/uikit'\nimport Page from './layout/Page'\n\nconst Wrapper = styled(Page)`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst PageLoader: React.FC = () => {\n  return (\n    <Wrapper>\n      <Spinner />\n    </Wrapper>\n  )\n}\n\nexport default PageLoader\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\n\n\nexport interface FarmsProps{\n    tokenMode?: boolean\n}\n\nconst ComingSoon: React.FC = () => {\n    return (\n        <Page>\n            <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center', fontSize:'5em'}}>\n                Coming Soon!\n            </Heading>\n\n             <img src=\"/images/egg/banner.png\" alt=\"illustration\" style={{width:'300px', height: 'auto', margin:'auto', float:'right', top: '20px',right: '1' +\n                     '0px', position: 'absolute'}} />\n        </Page>\n    )\n}\n\nexport default ComingSoon\n","import React, { useEffect, Suspense, lazy } from 'react'\nimport {BrowserRouter as Router, HashRouter, Redirect, Route, Switch} from 'react-router-dom'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { ResetCSS } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js'\nimport { useFetchPublicData } from 'state/hooks'\nimport GlobalStyle from './style/Global'\nimport Menu from './components/Menu'\nimport PageLoader from './components/PageLoader'\nimport ComingSoon from \"./views/ComingSoon\";\n\n// Route-based code splitting\n// Only pool is included in the main bundle because of it's the most visited page'\nconst Home = lazy(() => import('./views/Home'))\nconst Farms = lazy(() => import('./views/Farms'))\n// const Lottery = lazy(() => import('./views/Lottery'))\n// const Pools = lazy(() => import('./views/Pools'))\n// const Ifos = lazy(() => import('./views/Ifos'))\nconst NotFound = lazy(() => import('./views/NotFound'))\n// const Nft = lazy(() => import('./views/Nft'))\n\n// This config is required for number formating\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nconst App: React.FC = () => {\n  const { account, connect } = useWallet()\n  useEffect(() => {\n    if (!account && window.localStorage.getItem('accountStatus')) {\n      connect('injected')\n    }\n  }, [account, connect])\n\n  useFetchPublicData()\n\n  return (\n    <HashRouter>\n      <ResetCSS />\n      <GlobalStyle />\n      <Menu>\n        <Suspense fallback={<PageLoader />}>\n          <Switch>\n            <Route path=\"/\" exact>\n              <Home />\n            </Route>\n            <Route path=\"/jail\">\n              <Farms />\n            </Route>\n            <Route path=\"/bribes\">\n              <Farms tokenMode/>\n            </Route>\n            {/* <Route path=\"/pools\"> */}\n            {/*  <Pools /> */}\n            {/* </Route> */}\n             <Route path=\"/gambling\">\n              <ComingSoon />\n             </Route>\n            {/* <Route path=\"/ifo\"> */}\n            {/*  <Ifos /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/nft\"> */}\n            {/*  <Nft /> */}\n            {/* </Route> */}\n            {/* Redirect */}\n            {/* <Route path=\"/staking\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* <Route path=\"/syrup\"> */}\n            {/*  <Redirect to=\"/pools\" /> */}\n            {/* </Route> */}\n            {/* 404 */}\n            <Route component={NotFound} />\n          </Switch>\n        </Suspense>\n      </Menu>\n    </HashRouter>\n  )\n}\n\nexport default React.memo(App)\n","import React, { useState, useEffect, useRef } from 'react'\nimport { getWeb3 } from 'utils/web3'\n\nconst BlockContext = React.createContext(0)\n\nconst BlockContextProvider = ({ children }) => {\n  const previousBlock = useRef(0)\n  const [block, setBlock] = useState(0)\n\n  useEffect(() => {\n    const web3 = getWeb3()\n    const interval = setInterval(async () => {\n      const blockNumber = await web3.eth.getBlockNumber()\n      if (blockNumber !== previousBlock.current) {\n        previousBlock.current = blockNumber\n        setBlock(blockNumber)\n      }\n    }, 6000)\n\n    return () => clearInterval(interval)\n  }, [])\n\n  return <BlockContext.Provider value={block}>{children}</BlockContext.Provider>\n}\n\nexport { BlockContext, BlockContextProvider }\n","import { configureStore } from '@reduxjs/toolkit'\nimport farmsReducer from './farms'\nimport poolsReducer from './pools'\n\nexport default configureStore({\n  devTools: process.env.NODE_ENV !== 'production',\n  reducer: {\n    farms: farmsReducer,\n    pools: poolsReducer,\n  },\n})\n","import React from 'react'\nimport { ModalProvider } from '@pancakeswap-libs/uikit'\n// import bsc, { UseWalletProvider } from '@binance-chain/bsc-use-wallet'\nimport * as bsc from '@binance-chain/bsc-use-wallet'\nimport { Provider } from 'react-redux'\nimport getRpcUrl from 'utils/getRpcUrl'\nimport { LanguageContextProvider } from 'contexts/Localisation/languageContext'\nimport { ThemeContextProvider } from 'contexts/ThemeContext'\nimport { BlockContextProvider } from 'contexts/BlockContext'\nimport { RefreshContextProvider } from 'contexts/RefreshContext'\nimport store from 'state'\n\nconst Providers: React.FC = ({ children }) => {\n  const rpcUrl = getRpcUrl()\n  const chainId = parseInt(process.env.REACT_APP_CHAIN_ID);\n  return (\n    <Provider store={store}>\n      <ThemeContextProvider>\n        <LanguageContextProvider>\n          <bsc.UseWalletProvider\n            chainId={chainId}\n            connectors={{\n              walletconnect: { rpcUrl },\n              bsc,\n            }}\n          >\n            <BlockContextProvider>\n              <RefreshContextProvider>\n                <ModalProvider>{children}</ModalProvider>\n              </RefreshContextProvider>\n            </BlockContextProvider>\n          </bsc.UseWalletProvider>\n        </LanguageContextProvider>\n      </ThemeContextProvider>\n    </Provider>\n  )\n}\n\nexport default Providers\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport Providers from './Providers'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Providers>\n      <App />\n    </Providers>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","import Web3 from 'web3'\nimport { HttpProviderOptions } from 'web3-core-helpers'\nimport { AbiItem } from 'web3-utils'\nimport { ContractOptions } from 'web3-eth-contract'\nimport getRpcUrl from 'utils/getRpcUrl'\n\nconst RPC_URL = getRpcUrl()\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\n\n/**\n * Provides a web3 instance using our own private provider httpProver\n */\nconst getWeb3 = () => {\n  const web3 = new Web3(httpProvider)\n  return web3\n}\nconst getContract = (abi: any, address: string, contractOptions?: ContractOptions) => {\n  const web3 = getWeb3()\n  return new web3.eth.Contract((abi as unknown) as AbiItem, address, contractOptions)\n}\n\nexport { getWeb3, getContract, httpProvider }\n"],"sourceRoot":""}